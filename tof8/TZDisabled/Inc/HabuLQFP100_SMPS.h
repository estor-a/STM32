// Number of pins for this package: 79
#ifndef _HabuLQFP100_SMPS_h_
#define _HabuLQFP100_SMPS_h_
typedef enum { 
PA_0,  PA_1,  PA_2,  PA_3,  PA_4,  PA_5,  PA_6,  PA_7,  PA_8,  PA_9,  PA_10, PA_11, PA_12, PA_13, PA_14, PA_15, 
PB_0,  PB_1,  PB_2,  PB_3,  PB_4,  PB_5,  PB_6,  PB_7,  PB_8,  PB_9,  PB_10, PB_11, _xB12, PB_13, PB_14, PB_15, 
PC_0,  PC_1,  PC_2,  PC_3,  _xC4,  _xC5,  PC_6,  PC_7,  PC_8,  PC_9,  PC_10, PC_11, PC_12, PC_13, PC_14, PC_15, 
PD_0,  PD_1,  PD_2,  PD_3,  PD_4,  PD_5,  PD_6,  PD_7,  PD_8,  PD_9,  PD_10, PD_11, PD_12, PD_13, PD_14, PD_15, 
PE_0,  _xE1,  PE_2,  PE_3,  PE_4,  PE_5,  PE_6,  PE_7,  PE_8,  PE_9,  PE_10, PE_11, PE_12, PE_13, PE_14, PE_15, 
_xF0,  _xF1,  _xF2,  _xF3,  _xF4,  _xF5,  _xF6,  _xF7,  _xF8,  _xF9,  _xF10, _xF11, _xF12, _xF13, _xF14, _xF15, 
_xG0,  _xG1,  _xG2,  _xG3,  _xG4,  _xG5,  _xG6,  _xG7,  _xG8,  _xG9,  _xG10, _xG11, _xG12, _xG13, _xG14, _xG15, 
PH_0,  PH_1,  _xH2,  PH_3,  _xH4,  _xH5,  _xH6,  _xH7,  _xH8,  _xH9,  _xH10, _xH11, _xH12, _xH13, _xH14, _xH15, 
_xI0,  _xI1,  _xI2,  _xI3,  _xI4,  _xI5,  _xI6,  _xI7,  _xI8,  _xI9,  _xI10, _xI11, _xI12, _xI13, _xI14, _xI15, 
_xJ0,  _xJ1,  _xJ2,  _xJ3,  _xJ4,  _xJ5,  _xJ6,  _xJ7,  _xJ8,  _xJ9,  _xJ10, _xJ11, _xJ12, _xJ13, _xJ14, _xJ15, 
_xK0,  _xK1,  _xK2,  _xK3,  _xK4,  _xK5,  _xK6,  _xK7,  _xK8,  _xK9,  _xK10, _xK11, _xK12, _xK13, _xK14, _xK15, 
_xL0,  _xL1,  _xL2,  _xL3,  _xL4,  _xL5,  _xL6,  _xL7,  _xL8,  _xL9,  _xL10, _xL11, _xL12, _xL13, _xL14, _xL15, 
_xM0,  _xM1,  _xM2,  _xM3,  _xM4,  _xM5,  _xM6,  _xM7,  _xM8,  _xM9,  _xM10, _xM11, _xM12, _xM13, _xM14, _xM15, 
_xN0,  _xN1,  _xN2,  _xN3,  _xN4,  _xN5,  _xN6,  _xN7,  _xN8,  _xN9,  _xN10, _xN11, _xN12, _xN13, _xN14, _xN15, 
DIE_PAD_MAX, INTERNAL_VREF, INTERNAL_VTEMP,
NO_PADS = -1
} PadName_t;

// Number of custom signals for this package: 279
typedef enum { 
IO_AF_00, IO_AF_01, IO_AF_02, IO_AF_03, IO_AF_04, IO_AF_05, IO_AF_06, IO_AF_07, 
IO_AF_08, IO_AF_09, IO_AF_10, IO_AF_11, IO_AF_12, IO_AF_13, IO_AF_14, IO_AF_15, 
// the following enumeration are the signals which are user accessible, especially the ones going to pads
AF_MAXVAL,

ADC1_IN1,
ADC1_IN10,
ADC1_IN11,
ADC1_IN12,
ADC1_IN13,
ADC1_IN14,
ADC1_IN15,
ADC1_IN2,
ADC1_IN3,
ADC1_IN4,
ADC1_IN5,
ADC1_IN6,
ADC1_IN7,
ADC1_IN8,
ADC1_IN9,
ADC2_IN1,
ADC2_IN10,
ADC2_IN11,
ADC2_IN12,
ADC2_IN13,
ADC2_IN2,
ADC2_IN3,
ADC2_IN4,
ADC2_IN5,
ADC2_IN6,
ADC2_IN7,
ADC2_IN8,
ADC2_IN9,
ADF1_CCK0,
ADF1_CCK1,
ADF1_SDI0,
AUDIOCLK,
COMP1_INM1,
COMP1_INM2,
COMP1_INP1,
COMP1_INP2,
COMP1_INP3,
COMP1_INP4,
COMP1_OUT,
COMP2_INM1,
COMP2_INM2,
COMP2_INP1,
COMP2_INP2,
COMP2_OUT,
CRS_SYNC,
DAC1_OUT1,
DAC1_OUT2,
EVENTOUT,
FDCAN1_RX,
FDCAN1_TX,
I2C1_SCL,
I2C1_SDA,
I2C1_SMBA,
I2C2_SCL,
I2C2_SDA,
I2C2_SMBA,
I2C3_SCL,
I2C3_SDA,
I2C3_SMBA,
I3C1_SCL,
I3C1_SDA,
I3C2_SCL,
I3C2_SDA,
IR_OUT,
JTCK,
JTDI,
JTDO,
JTMS,
LPTIM1_CH1,
LPTIM1_CH2,
LPTIM1_ETR,
LPTIM1_IN1,
LPTIM1_IN2,
LPTIM2_CH1,
LPTIM2_CH2,
LPTIM2_ETR,
LPTIM2_IN1,
LPTIM2_IN2,
LPTIM3_CH1,
LPTIM3_CH2,
LPTIM3_ETR,
LPTIM3_IN1,
LPTIM4_ETR,
LPTIM4_IN1,
LPTIM4_OUT,
LPUART1_CTS,
LPUART1_DE,
LPUART1_RTS,
LPUART1_RX,
LPUART1_TX,
LSCO,
MCO,
MCO2,
NJTRST,
OCTOSPI1_CLK,
OCTOSPI1_DQS,
OCTOSPI1_IO0,
OCTOSPI1_IO1,
OCTOSPI1_IO2,
OCTOSPI1_IO3,
OCTOSPI1_IO4,
OCTOSPI1_IO5,
OCTOSPI1_IO6,
OCTOSPI1_IO7,
OCTOSPI1_NCLK,
OCTOSPI1_NCS,
OPAMP1_VINM,
OPAMP1_VINP,
OPAMP1_VOUT,
OPAMP2_VINM,
OPAMP2_VINP,
OPAMP2_VOUT,
OSC32_IN,
OSC32_OUT,
OSC_IN,
OSC_OUT,
PVD_IN,
PWR_CSLEEP,
PWR_CSTOP,
RTC_OUT1,
RTC_OUT2,
RTC_REFIN,
RTC_TS,
SAI1_CK1,
SAI1_CK2,
SAI1_D1,
SAI1_D2,
SAI1_D3,
SAI1_FS_A,
SAI1_FS_B,
SAI1_MCLK_A,
SAI1_MCLK_B,
SAI1_SCK_A,
SAI1_SCK_B,
SAI1_SD_A,
SAI1_SD_B,
SDMMC1_CDIR,
SDMMC1_CK,
SDMMC1_CKIN,
SDMMC1_CMD,
SDMMC1_D0,
SDMMC1_D0DIR,
SDMMC1_D1,
SDMMC1_D123DIR,
SDMMC1_D2,
SDMMC1_D3,
SDMMC1_D4,
SDMMC1_D5,
SDMMC1_D6,
SDMMC1_D7,
SPI1_MISO,
SPI1_MOSI,
SPI1_NSS,
SPI1_RDY,
SPI1_SCK,
SPI2_MISO,
SPI2_MOSI,
SPI2_NSS,
SPI2_RDY,
SPI2_SCK,
SPI3_MISO,
SPI3_MOSI,
SPI3_NSS,
SPI3_RDY,
SPI3_SCK,
SWCLK,
SWDIO,
TAMP_IN1,
TAMP_IN2,
TAMP_IN3,
TAMP_IN4,
TAMP_IN5,
TIM15_BKIN,
TIM15_CH1,
TIM15_CH1N,
TIM15_CH2,
TIM16_BKIN,
TIM16_CH1,
TIM16_CH1N,
TIM17_BKIN,
TIM17_CH1,
TIM17_CH1N,
TIM1_BKIN,
TIM1_BKIN2,
TIM1_CH1,
TIM1_CH1N,
TIM1_CH2,
TIM1_CH2N,
TIM1_CH3,
TIM1_CH3N,
TIM1_CH4,
TIM1_CH4N,
TIM1_ETR,
TIM2_CH1,
TIM2_CH2,
TIM2_CH3,
TIM2_CH4,
TIM2_ETR,
TIM3_CH1,
TIM3_CH2,
TIM3_CH3,
TIM3_CH4,
TIM3_ETR,
TIM4_CH1,
TIM4_CH2,
TIM4_CH3,
TIM4_CH4,
TIM4_ETR,
TRACECLK,
TRACED0,
TRACED1,
TRACED2,
TRACED3,
TRACESWO,
TSC_G1_IO1,
TSC_G1_IO2,
TSC_G1_IO3,
TSC_G1_IO4,
TSC_G2_IO1,
TSC_G2_IO2,
TSC_G2_IO3,
TSC_G2_IO4,
TSC_G3_IO1,
TSC_G3_IO2,
TSC_G3_IO3,
TSC_G3_IO4,
TSC_G4_IO1,
TSC_G4_IO2,
TSC_G4_IO3,
TSC_G4_IO4,
TSC_G5_IO1,
TSC_G5_IO2,
TSC_G5_IO3,
TSC_G5_IO4,
TSC_G6_IO1,
TSC_G6_IO2,
TSC_G6_IO3,
TSC_G6_IO4,
TSC_G7_IO1,
TSC_G7_IO2,
TSC_G7_IO3,
TSC_G7_IO4,
TSC_SYNC,
UART4_CTS,
UART4_DE,
UART4_RTS,
UART4_RX,
UART4_TX,
UART5_CTS,
UART5_DE,
UART5_RTS,
UART5_RX,
UART5_TX,
USART1_CK,
USART1_CTS,
USART1_DE,
USART1_NSS,
USART1_RTS,
USART1_RX,
USART1_TX,
USART3_CK,
USART3_CTS,
USART3_DE,
USART3_NSS,
USART3_RTS,
USART3_RX,
USART3_TX,
USB_DM,
USB_DP,
USB_NOE,
USB_SOF,
WKUP1,
WKUP2,
WKUP3,
WKUP4,
WKUP5,
WKUP6,
WKUP7,
WKUP8,
SIGNAL_MAX,
NO_SIGNAL,

} STM32_SignalName_t;

// MISSING FROM THE SCRIPT
#define GPIO_COUNT 14
extern const GPIO_TypeDef* IO_GPIOx[GPIO_COUNT];
extern const uint16_t pGPIO_PadValidMask[GPIO_COUNT];
extern const uint32_t RCC_GPIOx_ClockEnBitMask[GPIO_COUNT];

typedef struct {
  
  PadName_t PinName;
  uint32_t PPP_Base;
  STM32_SignalName_t SignalName;
  // AF contains the AF value (0..15) or the ADC channel number (0..31), 5 bit quantity, 3 unused bits
  //uint32_t AF; //   .rodata            const     0x800'0234  0x2570  HabuLQFP100_SMPS.o [1] 9584 bytes
  int8_t AF; //      .rodata            const     0x800'0234  0x1c14  HabuLQFP100_SMPS.o [1] 7188 bytes
  // 2396 bytes saving
//  char* SignalNameString;
  
} DS_PAD_t; // io_pin table and alternates in a single sweep through C database

extern const DS_PAD_t DS_PADs[]; // contains the pins and internal signals alternate functions/channels descriptions from datasheet
extern const uint32_t DS_PADsCount;

DS_PAD_t const* pDS_PAD_MatchByPinAndSignal(PadName_t PinName, STM32_SignalName_t SignalName);
int32_t iDS_PAD_NextMatchBySignal(STM32_SignalName_t SignalName, int32_t startindex);

#endif
